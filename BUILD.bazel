load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@rules_cc//cc:defs.bzl", "cc_proto_library")
load("@rules_proto//proto:defs.bzl", "proto_library")

# bazel run //:buildifier
# .. or warn
buildifier(
    name = "buildifier",
    exclude_patterns = [
        "./bazel-*/*",
        "./.git/*",
    ],
    lint_mode = "fix",
)

# Linux - use prebuilt OpenCV
# Hermetic build hosed with video module.
cc_library(
    name = "opencv_release",
    srcs = glob(
        [
            "third_party/opencv/lib/*.so.411",
        ],
        allow_empty = True,
    ),
    hdrs = glob(
        ["third_party/opencv/include/**/*"],
        allow_empty = True,
    ),
    includes = ["third_party/opencv/include"],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

cc_library(
    name = "opencv_debug",
    srcs = glob(
        [
            "third_party/opencv/lib_debug/*.so.411",
        ],
        allow_empty = True,
    ),
    hdrs = glob(
        ["third_party/opencv/include_debug/**/*"],
        allow_empty = True,
    ),
    includes = ["third_party/opencv/include_debub"],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "debug_build",
    values = {"compilation_mode": "dbg"},
)

cc_library(
    name = "opencv",
    target_compatible_with = ["@platforms//os:linux"],
    deps = select({
        ":debug_build": [":opencv_debug"],
        "//conditions:default": [":opencv_release"],
    }),
)

cc_library(
    name = "image_processing_toolbox",
    srcs = ["image_processing_toolbox.cc"],
    hdrs = ["image_processing_toolbox.h"],
    data = ["//testdata"],
    deps = [
        ":opencv",
        "@absl//absl/status",
        "@absl//absl/strings",
    ],
)

cc_test(
    name = "image_processing_toolbox_test",
    srcs = ["image_processing_toolbox_test.cc"],
    data = ["//testdata"],
    deps = [
        ":image_processing_toolbox",
        "@absl//absl/status:status_matchers",
        "@bazel_tools//tools/cpp/runfiles",
        "@googletest//:gtest_main",
    ],
)

cc_binary(
    name = "image_toolbox_cli",
    srcs = ["image_toolbox_cli.cc"],
    data = ["//testdata"],
    deps = [
        ":image_processing_toolbox",
        "@absl//absl/flags:flag",
        "@absl//absl/flags:parse",
        "@absl//absl/status",
        "@gflags",
        "@glog",
    ],
)

proto_library(
    name = "calibration_data",
    srcs = ["calibration_data.proto"],
)

cc_proto_library(
    name = "calibration_data_cc",
    deps = [":calibration_data"],
)

cc_library(
    name = "caibrator",
    srcs = ["calibrator.cc"],
    hdrs = ["calibrator.h"],
    deps = [
        ":calibration_data_cc",
        "//:opencv",
        "@absl//absl/status",
        "@glog",
    ],
)

cc_test(
    name = "calibrator_test",
    srcs = ["calibrator_test.cc"],
    data = ["//testdata"],
    deps = [
        ":caibrator",
        "@absl//absl/status:status_matchers",
        "@bazel_tools//tools/cpp/runfiles",
        "@googletest//:gtest_main",
        "@protobuf-matchers//protobuf-matchers",
    ],
)

cc_binary(
    name = "calibrator_cli",
    srcs = ["calibrator_cli.cc"],
    data = ["//testdata"],
    deps = [
        ":caibrator",
        "@absl//absl/flags:flag",
        "@absl//absl/flags:parse",
        "@absl//absl/status",
        "@gflags",
        "@glog",
        "@status_macros",
    ],
)

cc_library(
    name = "reconstruction",
    srcs = ["reconstruction.cc"],
    hdrs = ["reconstruction.h"],
    deps = [
        ":calibration_data_cc",
        ":sfm",
        "//:opencv",
        "@absl//absl/status",
        "@absl//absl/status:statusor",
        "@absl//absl/strings",
        "@glog",
        "@status_macros",
    ],
)

cc_test(
    name = "reconstruction_test",
    srcs = ["reconstruction_test.cc"],
    data = ["//testdata"],
    deps = [
        ":calibration_data_cc",
        ":reconstruction",
        "@absl//absl/status:status_matchers",
        "@bazel_tools//tools/cpp/runfiles",
        "@googletest//:gtest_main",
        "@protobuf-matchers//protobuf-matchers",
    ],
)

cc_library(
    name = "sfm",
    srcs = ["sfm.cc"],
    hdrs = ["sfm.h"],
    deps = [
        ":calibration_data_cc",
        "@absl//absl/status",
        "@absl//absl/strings",
        "@glog",
    ],
)

cc_binary(
    name = "run_main",
    srcs = ["run_main.cc"],
    data = ["//testdata"],
    deps = [
        ":reconstruction",
        "@absl//absl/flags:flag",
        "@absl//absl/flags:parse",
        "@absl//absl/status",
        "@gflags",
        "@glog",
        "@status_macros",
    ],
)
